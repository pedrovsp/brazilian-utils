import { isValid, format, identifyPaymentType, PaymentType } from '.';
// 83640000001-1 33120138000-2 81288462711-6 08013618155-1
describe('format', () => {
  test('should format payment barcode with mask', () => {
    expect(format('')).toBe('');
    expect(format('8')).toBe('8');
    expect(format('83')).toBe('83');
    expect(format('836')).toBe('836');
    expect(format('8364')).toBe('8364');
    expect(format('83640')).toBe('83640');
    expect(format('836400')).toBe('836400');
    expect(format('8364000')).toBe('8364000');
    expect(format('83640000')).toBe('83640000');
    expect(format('836400000')).toBe('836400000');
    expect(format('8364000000')).toBe('8364000000');
    expect(format('83640000001')).toBe('83640000001');
    expect(format('836400000011')).toBe('83640000001-1');
    expect(format('8364000000113')).toBe('83640000001-1 3');
    expect(format('83640000001133')).toBe('83640000001-1 33');
    expect(format('836400000011331')).toBe('83640000001-1 331');
    expect(format('8364000000113312')).toBe('83640000001-1 3312');
    expect(format('83640000001133120')).toBe('83640000001-1 33120');
    expect(format('836400000011331201')).toBe('83640000001-1 331201');
    expect(format('8364000000113312013')).toBe('83640000001-1 3312013');
    expect(format('83640000001133120138')).toBe('83640000001-1 33120138');
    expect(format('836400000011331201380')).toBe('83640000001-1 331201380');
    expect(format('8364000000113312013800')).toBe('83640000001-1 3312013800');
    expect(format('83640000001133120138000')).toBe('83640000001-1 33120138000');
    expect(format('836400000011331201380002')).toBe('83640000001-1 33120138000-2');
    expect(format('8364000000113312013800028')).toBe('83640000001-1 33120138000-2 8');
    expect(format('83640000001133120138000281')).toBe('83640000001-1 33120138000-2 81');
    expect(format('836400000011331201380002812')).toBe('83640000001-1 33120138000-2 812');
    expect(format('8364000000113312013800028128')).toBe('83640000001-1 33120138000-2 8128');
    expect(format('83640000001133120138000281288')).toBe('83640000001-1 33120138000-2 81288');
    expect(format('836400000011331201380002812884')).toBe('83640000001-1 33120138000-2 812884');
    expect(format('8364000000113312013800028128846')).toBe('83640000001-1 33120138000-2 8128846');
    expect(format('83640000001133120138000281288462')).toBe('83640000001-1 33120138000-2 81288462');
    expect(format('836400000011331201380002812884627')).toBe('83640000001-1 33120138000-2 812884627');
    expect(format('8364000000113312013800028128846271')).toBe('83640000001-1 33120138000-2 8128846271');
    expect(format('83640000001133120138000281288462711')).toBe('83640000001-1 33120138000-2 81288462711');
    expect(format('836400000011331201380002812884627116')).toBe('83640000001-1 33120138000-2 81288462711-6');
    expect(format('8364000000113312013800028128846271160')).toBe('83640000001-1 33120138000-2 81288462711-6 0');
    expect(format('83640000001133120138000281288462711608')).toBe('83640000001-1 33120138000-2 81288462711-6 08');
    expect(format('836400000011331201380002812884627116080')).toBe('83640000001-1 33120138000-2 81288462711-6 080');
    expect(format('8364000000113312013800028128846271160801')).toBe('83640000001-1 33120138000-2 81288462711-6 0801');
    expect(format('83640000001133120138000281288462711608013')).toBe('83640000001-1 33120138000-2 81288462711-6 08013');
    expect(format('836400000011331201380002812884627116080136')).toBe(
      '83640000001-1 33120138000-2 81288462711-6 080136'
    );
    expect(format('8364000000113312013800028128846271160801361')).toBe(
      '83640000001-1 33120138000-2 81288462711-6 0801361'
    );
    expect(format('83640000001133120138000281288462711608013618')).toBe(
      '83640000001-1 33120138000-2 81288462711-6 08013618'
    );
    expect(format('836400000011331201380002812884627116080136181')).toBe(
      '83640000001-1 33120138000-2 81288462711-6 080136181'
    );
    expect(format('8364000000113312013800028128846271160801361815')).toBe(
      '83640000001-1 33120138000-2 81288462711-6 0801361815'
    );
    expect(format('83640000001133120138000281288462711608013618155')).toBe(
      '83640000001-1 33120138000-2 81288462711-6 08013618155'
    );
    expect(format('836400000011331201380002812884627116080136181551')).toBe(
      '83640000001-1 33120138000-2 81288462711-6 08013618155-1'
    );
  });

  test(`shouldn't add digits after the conveio length`, () => {
    expect(format('83640000001133120138000281288462711608013618155123123123')).toBe(
      '83640000001-1 33120138000-2 81288462711-6 08013618155-1'
    );

    expect(format('83640000001133120138000281288462711608013618155124124124124')).toBe(
      '83640000001-1 33120138000-2 81288462711-6 08013618155-1'
    );
  });

  test('should remove all non numeric characters convenio', () => {
    expect(format('8364000000@1-1 33120138000-2:: 81288462711-6# 080%13618155-1')).toBe(
      '83640000001-1 33120138000-2 81288462711-6 08013618155-1'
    );

    expect(format('8364000$$0001-1 331201DS38000-2 81288S#462711-6 AA08013618155-1')).toBe(
      '83640000001-1 33120138000-2 81288462711-6 08013618155-1'
    );
  });

  test('should return an empty string when receive an empty string', () => {
    expect(format('')).toBe('');
    expect(format('')).toBe('');
  });
  expect(format('1')).toBe('1');
  expect(format('10')).toBe('10');
  expect(format('104')).toBe('104');
  expect(format('1049')).toBe('1049');
  expect(format('10491')).toBe('10491');
  expect(format('104914')).toBe('10491.4');
  expect(format('1049144')).toBe('10491.44');
  expect(format('10491443')).toBe('10491.443');
  expect(format('104914433')).toBe('10491.4433');
  expect(format('1049144338')).toBe('10491.44338');
  expect(format('10491443385')).toBe('10491.44338 5');
  expect(format('104914433855')).toBe('10491.44338 55');
  expect(format('1049144338551')).toBe('10491.44338 551');
  expect(format('10491443385511')).toBe('10491.44338 5511');
  expect(format('104914433855119')).toBe('10491.44338 55119');
  expect(format('1049144338551190')).toBe('10491.44338 55119.0');
  expect(format('10491443385511900')).toBe('10491.44338 55119.00');
  expect(format('104914433855119000')).toBe('10491.44338 55119.000');
  expect(format('1049144338551190000')).toBe('10491.44338 55119.0000');
  expect(format('10491443385511900000')).toBe('10491.44338 55119.00000');
  expect(format('104914433855119000002')).toBe('10491.44338 55119.000002');
  expect(format('1049144338551190000020')).toBe('10491.44338 55119.000002 0');
  expect(format('10491443385511900000200')).toBe('10491.44338 55119.000002 00');
  expect(format('104914433855119000002000')).toBe('10491.44338 55119.000002 000');
  expect(format('1049144338551190000020000')).toBe('10491.44338 55119.000002 0000');
  expect(format('10491443385511900000200000')).toBe('10491.44338 55119.000002 00000');
  expect(format('104914433855119000002000000')).toBe('10491.44338 55119.000002 00000.0');
  expect(format('1049144338551190000020000000')).toBe('10491.44338 55119.000002 00000.00');
  expect(format('10491443385511900000200000000')).toBe('10491.44338 55119.000002 00000.000');
  expect(format('104914433855119000002000000001')).toBe('10491.44338 55119.000002 00000.0001');
  expect(format('1049144338551190000020000000014')).toBe('10491.44338 55119.000002 00000.00014');
  expect(format('10491443385511900000200000000141')).toBe('10491.44338 55119.000002 00000.000141');
  expect(format('104914433855119000002000000001413')).toBe('10491.44338 55119.000002 00000.000141 3');
  expect(format('1049144338551190000020000000014132')).toBe('10491.44338 55119.000002 00000.000141 3 2');
  expect(format('10491443385511900000200000000141325')).toBe('10491.44338 55119.000002 00000.000141 3 25');
  expect(format('104914433855119000002000000001413252')).toBe('10491.44338 55119.000002 00000.000141 3 252');
  expect(format('1049144338551190000020000000014132523')).toBe('10491.44338 55119.000002 00000.000141 3 2523');
  expect(format('10491443385511900000200000000141325230')).toBe('10491.44338 55119.000002 00000.000141 3 25230');
  expect(format('104914433855119000002000000001413252300')).toBe('10491.44338 55119.000002 00000.000141 3 252300');
  expect(format('1049144338551190000020000000014132523000')).toBe('10491.44338 55119.000002 00000.000141 3 2523000');
  expect(format('10491443385511900000200000000141325230000')).toBe('10491.44338 55119.000002 00000.000141 3 25230000');
  expect(format('104914433855119000002000000001413252300000')).toBe(
    '10491.44338 55119.000002 00000.000141 3 252300000'
  );
  expect(format('1049144338551190000020000000014132523000009')).toBe(
    '10491.44338 55119.000002 00000.000141 3 2523000009'
  );
  expect(format('10491443385511900000200000000141325230000093')).toBe(
    '10491.44338 55119.000002 00000.000141 3 25230000093'
  );
  expect(format('104914433855119000002000000001413252300000934')).toBe(
    '10491.44338 55119.000002 00000.000141 3 252300000934'
  );
  expect(format('1049144338551190000020000000014132523000009342')).toBe(
    '10491.44338 55119.000002 00000.000141 3 2523000009342'
  );
  expect(format('10491443385511900000200000000141325230000093423')).toBe(
    '10491.44338 55119.000002 00000.000141 3 25230000093423'
  );
});

describe('isValid', () => {
  describe('should return false', () => {
    test('when is a empty string', () => {
      expect(isValid('')).toBe(false);
    });

    test('when is null', () => {
      expect(isValid(null as any)).toBe(false);
    });

    test('when is undefined', () => {
      expect(isValid(undefined as any)).toBe(false);
    });

    test(`when length is invalid`, () => {
      expect(isValid('123456789')).toBe(false);
    });

    test('when is array', () => {
      expect(isValid([] as any)).toBe(false);
    });

    test('when is object', () => {
      expect(isValid({} as any)).toBe(false);
    });

    test('when is boolean', () => {
      expect(isValid(true as any)).toBe(false);
      expect(isValid(false as any)).toBe(false);
    });
  });

  describe('should return true', () => {
    test('when is a covenio valid without mask', () => {
      expect(isValid('836400000011512401380005927415889116000764204210')).toBe(true);
    });

    test('when is a covenio valid with mask', () => {
      expect(isValid('83640000001-1 51240138000-5 92741588911-6 00076420421-0')).toBe(true);
    });
    test('when is a boleto valid without mask', () => {
      expect(isValid('00190000090114971860168524522114675860000102656')).toBe(true);
    });

    test('when is a boleto valid with mask', () => {
      expect(isValid('0019000009 01149.718601 68524.522114 6 75860000102656')).toBe(true);
    });
  });

  describe('should return false', () => {
    test('when check digit mod10 is invalid', () => {
      expect(isValid('00190000020114971860168524522114675860000102656')).toBe(false);
    });

    test('check digit mod11 is invalid', () => {
      expect(isValid('00190000090114971860168524522114975860000102656')).toBe(false);
    });

    test('when is a covenio length is invalid', () => {
      expect(isValid('8364000001-1 51240138000-5 92741588911-6 00076420421-0')).toBe(false);
    });
  });
});

describe('identifyPaymentMethod', () => {
  test('when is null', () => {
    expect(identifyPaymentType(null as any)).toBe(PaymentType.INVALID);
  });

  test('when is undefined', () => {
    expect(identifyPaymentType(undefined as any)).toBe(PaymentType.INVALID);
  });

  test(`when length is invalid`, () => {
    expect(identifyPaymentType('123456789')).toBe(PaymentType.INVALID);
  });

  test(`boleto value`, () => {
    expect(identifyPaymentType('0019000009 01149.718601 68524.522114 6 75860000102656')).toBe(PaymentType.BOLETO);
  });

  test(`convenio value`, () => {
    expect(identifyPaymentType('836400000011512401380005927415889116000764204210')).toBe(PaymentType.CONVENIO);
  });
});
